// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions currentPlatform({env}) {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return env == "dev"
            ? androidDev
            : env == "prod"
                ? androidProd
                : throw UnsupportedError('Invalid env');
      case TargetPlatform.iOS:
        return env == "dev"
            ? iosDev
            : env == "prod"
                ? iosProd
                : throw UnsupportedError('Invalid env');
      case TargetPlatform.macOS:
        throw UnsupportedError(
            'DefaultFirebaseOptions have not been configured for macos - '
            'you can reconfigure this by running the FlutterFire CLI again.');
      case TargetPlatform.windows:
        throw UnsupportedError(
            'DefaultFirebaseOptions have not been configured for windows - '
            'you can reconfigure this by running the FlutterFire CLI again.');
      case TargetPlatform.linux:
        throw UnsupportedError(
            'DefaultFirebaseOptions have not been configured for linux - '
            'you can reconfigure this by running the FlutterFire CLI again.');
      default:
        throw UnsupportedError(
            'DefaultFirebaseOptions are not supported for this platform.');
    }
  }

  // FOR DEV
  static const FirebaseOptions androidDev = FirebaseOptions(
    apiKey: 'AIzaSyBlZbMrxKqpXPAdjP5xJCqLJ3TjHQNPpgc',
    appId: '1:662885874609:android:afb45f4d40325380c49b90',
    messagingSenderId: '662885874609',
    projectId: 'peanut-dev',
    storageBucket: 'peanut-dev.appspot.com',
  );
  static const FirebaseOptions iosDev = FirebaseOptions(
    apiKey: 'AIzaSyB7fHWgaZeK5skdAswKqsRCvhyD0I7FaAE',
    appId: '1:662885874609:ios:2ed66f2033e02043c49b90',
    messagingSenderId: '662885874609',
    projectId: 'peanut-dev',
    storageBucket: 'peanut-dev.appspot.com',
    iosClientId:
        '662885874609-6l7iu6gniqlf42o3ik3fmkpp5rjb783k.apps.googleusercontent.com',
    iosBundleId: 'com.example.peanut',
  );

  // FOR PROD
  static const FirebaseOptions androidProd = FirebaseOptions(
    apiKey: 'AIzaSyBlZbMrxKqpXPAdjP5xJCqLJ3TjHQNPpgc',
    appId: '1:662885874609:android:afb45f4d40325380c49b90',
    messagingSenderId: '662885874609',
    projectId: 'peanut-dev',
    storageBucket: 'peanut-dev.appspot.com',
  );
  static const FirebaseOptions iosProd = FirebaseOptions(
    apiKey: 'AIzaSyB7fHWgaZeK5skdAswKqsRCvhyD0I7FaAE',
    appId: '1:662885874609:ios:2ed66f2033e02043c49b90',
    messagingSenderId: '662885874609',
    projectId: 'peanut-dev',
    storageBucket: 'peanut-dev.appspot.com',
    iosClientId:
        '662885874609-6l7iu6gniqlf42o3ik3fmkpp5rjb783k.apps.googleusercontent.com',
    iosBundleId: 'com.example.peanut',
  );
}
